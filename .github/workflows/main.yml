name: 'CI/CD Pipeline (Node.js + MongoDB + Redis)'

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize]
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Środowisko docelowe (staging/production)'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  ################################################
  # 1. Faza wstępna (równoległe: lint, audit, format)
  ################################################

  lint:
    name: Lint (ESLint)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  audit:
    name: Security Audit (npm audit)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-audit-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-audit-

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit (poziom moderate)
        run: npm audit --audit-level=moderate

  format:
    name: Check Formatting (Prettier)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Check Prettier formatting
        run: npm run format

  ################################################################
  # 2. Testy jednostkowe w matrixie (różne wersje Node.js + cache)
  ################################################################
  unit_tests:
    name: Unit Tests (Node.js matrix)
    runs-on: ubuntu-latest
    needs:
      - lint
      - audit
      - format
    strategy:
      matrix:
        node-version: [14, 16, 18]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Install dependencies     # <-- nadajemy ID i allow failure
        id: npm_install
        continue-on-error: true
        run: npm ci

      - name: Dump npm-debug log (jeśli był błąd)
        if: steps.npm_install.outcome == 'failure'
        run: |
          echo "---- Zawartość katalogu ~/.npm/_logs/ ----"
          ls ~/.npm/_logs/ || true
          echo "---- Pełny dump plików .log: ----"
          cat ~/.npm/_logs/*.log || true

      - name: Run Node.js Unit Tests   # <-- uruchamiamy testy tylko, gdy npm_install jest sukcesem
        if: steps.npm_install.outcome == 'success'
        run: npm run test:unit

      - name: Upload unit coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-${{ matrix.node-version }}
          path: coverage/unit

      - name: Publish coverage to Codecov
        if: steps.npm_install.outcome == 'success'
        uses: codecov/codecov-action@v3
        with:
          files: coverage/unit/**/*.lcov
          flags: unit-${{ matrix.node-version }}

  ###########################################################################
  # 3. Testy uruchamiane we własnym kontenerze Docker (tylko unit-testy)
  ###########################################################################

  container_tests:
    name: Tests in Docker Container (Unit only)
    runs-on: ubuntu-latest
    needs:
      - lint
      - audit
      - format
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image for tests
        run: |
          docker build \
            --tag ci-cd-node-mongo-redis-ci:${{ github.sha }} \
            --file Dockerfile \
            .

      - name: Create local npm cache volume directory
        run: mkdir -p ${{ runner.temp }}/npm-cache

      - name: Run unit tests inside Docker (z ograniczeniami zasobów)
        run: |
          docker run --rm \
            --cpus=2 --memory=4g \
            -v ${{ github.workspace }}:/usr/src/app \
            -v ${{ runner.temp }}/npm-cache:/root/.npm \
            -w /usr/src/app \
            ci-cd-node-mongo-redis-ci:${{ github.sha }} \
            bash -c "npm ci && npm run test:unit"

      - name: Upload Docker-based unit coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-unit-coverage
          path: coverage/unit

  ####################################################
  # 4. Testy integracyjne z docker-compose (Mongo+Redis)
  ####################################################

  integration_tests:
    name: Integration Tests (docker-compose Mongo+Redis)
    runs-on: ubuntu-latest
    needs:
      - unit_tests
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Docker Compose
        run: docker-compose up -d --build

      - name: Wait for App to be healthy
        run: |
          until curl --silent http://localhost:3000/; do
            sleep 1
          done

      - name: Run Integration Tests
        run: npm run test:integration

      - name: Upload integration coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: coverage/integration

  ###########################################
  # 5. Budowanie obrazu produkcyjnego Docker #
  ###########################################

  build:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs:
      - integration_tests
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Build Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: false
          tags: ci-cd-node-mongo-redis:${{ github.sha }}

      - name: Save Docker image to tar
        run: docker save ci-cd-node-mongo-redis:${{ github.sha }} -o image.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ github.sha }}
          path: image.tar

  ##############################################
  # 6. Deployment (symulowany) – tylko na main  #
  ##############################################

  deploy:
    name: Deploy (symulowany)
    runs-on: ubuntu-latest
    needs:
      - build
    if: ${{ github.ref == 'refs/heads/main' && always() }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Symulacja pobrania artefaktu obrazu
        run: echo ">>> [Symulacja deploy] Pobieram artefakt obrazu Docker (tylko echo)."

      - name: Symulacja ładowania obrazu
        run: echo ">>> [Symulacja deploy] Ładuję obraz Docker (tylko echo)."

      - name: Run Custom Deploy Action (symulacja)
        id: custom_deploy
        uses: ./.github/actions/custom-deploy
        with:
          environment: ${{ github.event.inputs.environment || 'staging' }}
          version: ${{ github.sha }}
          notify-team: 'true'

      - name: Wyświetl symulowane informacje o wdrożeniu
        run: |
          echo ">>> [Symulacja deploy] Deployment URL: ${{ steps.custom_deploy.outputs.deployment-url }}"
          echo ">>> [Symulacja deploy] Deployment Time: ${{ steps.custom_deploy.outputs.deployment-time }}"

      - name: Notify on Deployment Failure (tylko symulacja komentarza)
        if: failure()
        run: echo ">>> [Symulacja deploy] Wystąpił błąd w symulowanym wdrożeniu – (tylko echo, brak rzeczywistej akcji)."
